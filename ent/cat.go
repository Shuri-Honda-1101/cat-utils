// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Shuri-Honda-1101/cat-utils/ent/cat"
	"github.com/Shuri-Honda-1101/cat-utils/ent/user"
	"github.com/google/uuid"
)

// Cat is the model entity for the Cat schema.
type Cat struct {
	config `json:"-"`
	// ID of the ent.
	// 猫のID。UUIDで生成される変更不可なフィールド
	ID uuid.UUID `json:"id,omitempty"`
	// 猫の名前。空文字不可。最大長は15文字。
	Name string `json:"name,omitempty"`
	// 猫の誕生日、nullable
	Birthday time.Time `json:"birthday,omitempty"`
	// 猫の性別。maleかfemaleのみ
	Sex cat.Sex `json:"sex,omitempty"`
	// 猫の体重。nullable
	Weight int `json:"weight,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CatQuery when eager-loading is set.
	Edges        CatEdges `json:"edges"`
	user_cats    *uuid.UUID
	selectValues sql.SelectValues
}

// CatEdges holds the relations/edges for other nodes in the graph.
type CatEdges struct {
	// 猫のオーナー。Userと1対多の関係
	Owner *User `json:"owner,omitempty"`
	// 猫のトイレの記録。Toiletと1対多の関係
	Toilets []*Toilet `json:"toilets,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CatEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ToiletsOrErr returns the Toilets value or an error if the edge
// was not loaded in eager-loading.
func (e CatEdges) ToiletsOrErr() ([]*Toilet, error) {
	if e.loadedTypes[1] {
		return e.Toilets, nil
	}
	return nil, &NotLoadedError{edge: "toilets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cat.FieldWeight:
			values[i] = new(sql.NullInt64)
		case cat.FieldName, cat.FieldSex:
			values[i] = new(sql.NullString)
		case cat.FieldBirthday:
			values[i] = new(sql.NullTime)
		case cat.FieldID:
			values[i] = new(uuid.UUID)
		case cat.ForeignKeys[0]: // user_cats
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cat fields.
func (c *Cat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cat.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cat.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case cat.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				c.Birthday = value.Time
			}
		case cat.FieldSex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				c.Sex = cat.Sex(value.String)
			}
		case cat.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				c.Weight = int(value.Int64)
			}
		case cat.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_cats", values[i])
			} else if value.Valid {
				c.user_cats = new(uuid.UUID)
				*c.user_cats = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cat.
// This includes values selected through modifiers, order, etc.
func (c *Cat) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Cat entity.
func (c *Cat) QueryOwner() *UserQuery {
	return NewCatClient(c.config).QueryOwner(c)
}

// QueryToilets queries the "toilets" edge of the Cat entity.
func (c *Cat) QueryToilets() *ToiletQuery {
	return NewCatClient(c.config).QueryToilets(c)
}

// Update returns a builder for updating this Cat.
// Note that you need to call Cat.Unwrap() before calling this method if this Cat
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cat) Update() *CatUpdateOne {
	return NewCatClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cat) Unwrap() *Cat {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cat is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cat) String() string {
	var builder strings.Builder
	builder.WriteString("Cat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("birthday=")
	builder.WriteString(c.Birthday.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", c.Sex))
	builder.WriteString(", ")
	builder.WriteString("weight=")
	builder.WriteString(fmt.Sprintf("%v", c.Weight))
	builder.WriteByte(')')
	return builder.String()
}

// Cats is a parsable slice of Cat.
type Cats []*Cat
