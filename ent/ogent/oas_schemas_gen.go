// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// Ref: #/components/schemas/CatCreate
type CatCreate struct {
	ID       uuid.UUID    `json:"id"`
	Name     string       `json:"name"`
	Birthday OptDateTime  `json:"birthday"`
	Sex      CatCreateSex `json:"sex"`
	Weight   OptInt       `json:"weight"`
}

// GetID returns the value of ID.
func (s *CatCreate) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *CatCreate) GetName() string {
	return s.Name
}

// GetBirthday returns the value of Birthday.
func (s *CatCreate) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetSex returns the value of Sex.
func (s *CatCreate) GetSex() CatCreateSex {
	return s.Sex
}

// GetWeight returns the value of Weight.
func (s *CatCreate) GetWeight() OptInt {
	return s.Weight
}

// SetID sets the value of ID.
func (s *CatCreate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CatCreate) SetName(val string) {
	s.Name = val
}

// SetBirthday sets the value of Birthday.
func (s *CatCreate) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetSex sets the value of Sex.
func (s *CatCreate) SetSex(val CatCreateSex) {
	s.Sex = val
}

// SetWeight sets the value of Weight.
func (s *CatCreate) SetWeight(val OptInt) {
	s.Weight = val
}

func (*CatCreate) createCatRes() {}

type CatCreateSex string

const (
	CatCreateSexMale   CatCreateSex = "male"
	CatCreateSexFemale CatCreateSex = "female"
)

// MarshalText implements encoding.TextMarshaler.
func (s CatCreateSex) MarshalText() ([]byte, error) {
	switch s {
	case CatCreateSexMale:
		return []byte(s), nil
	case CatCreateSexFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CatCreateSex) UnmarshalText(data []byte) error {
	switch CatCreateSex(data) {
	case CatCreateSexMale:
		*s = CatCreateSexMale
		return nil
	case CatCreateSexFemale:
		*s = CatCreateSexFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CatList
type CatList struct {
	ID       uuid.UUID   `json:"id"`
	Name     string      `json:"name"`
	Birthday OptDateTime `json:"birthday"`
	Sex      CatListSex  `json:"sex"`
	Weight   OptInt      `json:"weight"`
}

// GetID returns the value of ID.
func (s *CatList) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *CatList) GetName() string {
	return s.Name
}

// GetBirthday returns the value of Birthday.
func (s *CatList) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetSex returns the value of Sex.
func (s *CatList) GetSex() CatListSex {
	return s.Sex
}

// GetWeight returns the value of Weight.
func (s *CatList) GetWeight() OptInt {
	return s.Weight
}

// SetID sets the value of ID.
func (s *CatList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CatList) SetName(val string) {
	s.Name = val
}

// SetBirthday sets the value of Birthday.
func (s *CatList) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetSex sets the value of Sex.
func (s *CatList) SetSex(val CatListSex) {
	s.Sex = val
}

// SetWeight sets the value of Weight.
func (s *CatList) SetWeight(val OptInt) {
	s.Weight = val
}

type CatListSex string

const (
	CatListSexMale   CatListSex = "male"
	CatListSexFemale CatListSex = "female"
)

// MarshalText implements encoding.TextMarshaler.
func (s CatListSex) MarshalText() ([]byte, error) {
	switch s {
	case CatListSexMale:
		return []byte(s), nil
	case CatListSexFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CatListSex) UnmarshalText(data []byte) error {
	switch CatListSex(data) {
	case CatListSexMale:
		*s = CatListSexMale
		return nil
	case CatListSexFemale:
		*s = CatListSexFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Cat_OwnerRead
type CatOwnerRead struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *CatOwnerRead) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *CatOwnerRead) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CatOwnerRead) GetEmail() string {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CatOwnerRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CatOwnerRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *CatOwnerRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CatOwnerRead) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CatOwnerRead) SetEmail(val string) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CatOwnerRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CatOwnerRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*CatOwnerRead) readCatOwnerRes() {}

// Ref: #/components/schemas/CatRead
type CatRead struct {
	ID       uuid.UUID   `json:"id"`
	Name     string      `json:"name"`
	Birthday OptDateTime `json:"birthday"`
	Sex      CatReadSex  `json:"sex"`
	Weight   OptInt      `json:"weight"`
}

// GetID returns the value of ID.
func (s *CatRead) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *CatRead) GetName() string {
	return s.Name
}

// GetBirthday returns the value of Birthday.
func (s *CatRead) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetSex returns the value of Sex.
func (s *CatRead) GetSex() CatReadSex {
	return s.Sex
}

// GetWeight returns the value of Weight.
func (s *CatRead) GetWeight() OptInt {
	return s.Weight
}

// SetID sets the value of ID.
func (s *CatRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CatRead) SetName(val string) {
	s.Name = val
}

// SetBirthday sets the value of Birthday.
func (s *CatRead) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetSex sets the value of Sex.
func (s *CatRead) SetSex(val CatReadSex) {
	s.Sex = val
}

// SetWeight sets the value of Weight.
func (s *CatRead) SetWeight(val OptInt) {
	s.Weight = val
}

func (*CatRead) readCatRes() {}

type CatReadSex string

const (
	CatReadSexMale   CatReadSex = "male"
	CatReadSexFemale CatReadSex = "female"
)

// MarshalText implements encoding.TextMarshaler.
func (s CatReadSex) MarshalText() ([]byte, error) {
	switch s {
	case CatReadSexMale:
		return []byte(s), nil
	case CatReadSexFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CatReadSex) UnmarshalText(data []byte) error {
	switch CatReadSex(data) {
	case CatReadSexMale:
		*s = CatReadSexMale
		return nil
	case CatReadSexFemale:
		*s = CatReadSexFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Cat_ToiletsList
type CatToiletsList struct {
	ID   int                `json:"id"`
	Time time.Time          `json:"time"`
	Type CatToiletsListType `json:"type"`
	Memo OptString          `json:"memo"`
}

// GetID returns the value of ID.
func (s *CatToiletsList) GetID() int {
	return s.ID
}

// GetTime returns the value of Time.
func (s *CatToiletsList) GetTime() time.Time {
	return s.Time
}

// GetType returns the value of Type.
func (s *CatToiletsList) GetType() CatToiletsListType {
	return s.Type
}

// GetMemo returns the value of Memo.
func (s *CatToiletsList) GetMemo() OptString {
	return s.Memo
}

// SetID sets the value of ID.
func (s *CatToiletsList) SetID(val int) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *CatToiletsList) SetTime(val time.Time) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *CatToiletsList) SetType(val CatToiletsListType) {
	s.Type = val
}

// SetMemo sets the value of Memo.
func (s *CatToiletsList) SetMemo(val OptString) {
	s.Memo = val
}

type CatToiletsListType string

const (
	CatToiletsListTypePee CatToiletsListType = "pee"
	CatToiletsListTypePoo CatToiletsListType = "poo"
)

// MarshalText implements encoding.TextMarshaler.
func (s CatToiletsListType) MarshalText() ([]byte, error) {
	switch s {
	case CatToiletsListTypePee:
		return []byte(s), nil
	case CatToiletsListTypePoo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CatToiletsListType) UnmarshalText(data []byte) error {
	switch CatToiletsListType(data) {
	case CatToiletsListTypePee:
		*s = CatToiletsListTypePee
		return nil
	case CatToiletsListTypePoo:
		*s = CatToiletsListTypePoo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CatUpdate
type CatUpdate struct {
	ID       uuid.UUID    `json:"id"`
	Name     string       `json:"name"`
	Birthday OptDateTime  `json:"birthday"`
	Sex      CatUpdateSex `json:"sex"`
	Weight   OptInt       `json:"weight"`
}

// GetID returns the value of ID.
func (s *CatUpdate) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *CatUpdate) GetName() string {
	return s.Name
}

// GetBirthday returns the value of Birthday.
func (s *CatUpdate) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetSex returns the value of Sex.
func (s *CatUpdate) GetSex() CatUpdateSex {
	return s.Sex
}

// GetWeight returns the value of Weight.
func (s *CatUpdate) GetWeight() OptInt {
	return s.Weight
}

// SetID sets the value of ID.
func (s *CatUpdate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *CatUpdate) SetName(val string) {
	s.Name = val
}

// SetBirthday sets the value of Birthday.
func (s *CatUpdate) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetSex sets the value of Sex.
func (s *CatUpdate) SetSex(val CatUpdateSex) {
	s.Sex = val
}

// SetWeight sets the value of Weight.
func (s *CatUpdate) SetWeight(val OptInt) {
	s.Weight = val
}

func (*CatUpdate) updateCatRes() {}

type CatUpdateSex string

const (
	CatUpdateSexMale   CatUpdateSex = "male"
	CatUpdateSexFemale CatUpdateSex = "female"
)

// MarshalText implements encoding.TextMarshaler.
func (s CatUpdateSex) MarshalText() ([]byte, error) {
	switch s {
	case CatUpdateSexMale:
		return []byte(s), nil
	case CatUpdateSexFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CatUpdateSex) UnmarshalText(data []byte) error {
	switch CatUpdateSex(data) {
	case CatUpdateSexMale:
		*s = CatUpdateSexMale
		return nil
	case CatUpdateSexFemale:
		*s = CatUpdateSexFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateCatReq struct {
	Name     string          `json:"name"`
	Birthday OptDateTime     `json:"birthday"`
	Sex      CreateCatReqSex `json:"sex"`
	Weight   OptInt          `json:"weight"`
	Owner    OptUUID         `json:"owner"`
	Toilets  []int           `json:"toilets"`
}

// GetName returns the value of Name.
func (s *CreateCatReq) GetName() string {
	return s.Name
}

// GetBirthday returns the value of Birthday.
func (s *CreateCatReq) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetSex returns the value of Sex.
func (s *CreateCatReq) GetSex() CreateCatReqSex {
	return s.Sex
}

// GetWeight returns the value of Weight.
func (s *CreateCatReq) GetWeight() OptInt {
	return s.Weight
}

// GetOwner returns the value of Owner.
func (s *CreateCatReq) GetOwner() OptUUID {
	return s.Owner
}

// GetToilets returns the value of Toilets.
func (s *CreateCatReq) GetToilets() []int {
	return s.Toilets
}

// SetName sets the value of Name.
func (s *CreateCatReq) SetName(val string) {
	s.Name = val
}

// SetBirthday sets the value of Birthday.
func (s *CreateCatReq) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetSex sets the value of Sex.
func (s *CreateCatReq) SetSex(val CreateCatReqSex) {
	s.Sex = val
}

// SetWeight sets the value of Weight.
func (s *CreateCatReq) SetWeight(val OptInt) {
	s.Weight = val
}

// SetOwner sets the value of Owner.
func (s *CreateCatReq) SetOwner(val OptUUID) {
	s.Owner = val
}

// SetToilets sets the value of Toilets.
func (s *CreateCatReq) SetToilets(val []int) {
	s.Toilets = val
}

type CreateCatReqSex string

const (
	CreateCatReqSexMale   CreateCatReqSex = "male"
	CreateCatReqSexFemale CreateCatReqSex = "female"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateCatReqSex) MarshalText() ([]byte, error) {
	switch s {
	case CreateCatReqSexMale:
		return []byte(s), nil
	case CreateCatReqSexFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateCatReqSex) UnmarshalText(data []byte) error {
	switch CreateCatReqSex(data) {
	case CreateCatReqSexMale:
		*s = CreateCatReqSexMale
		return nil
	case CreateCatReqSexFemale:
		*s = CreateCatReqSexFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateToiletReq struct {
	Time time.Time           `json:"time"`
	Type CreateToiletReqType `json:"type"`
	Memo OptString           `json:"memo"`
	Cat  OptUUID             `json:"cat"`
}

// GetTime returns the value of Time.
func (s *CreateToiletReq) GetTime() time.Time {
	return s.Time
}

// GetType returns the value of Type.
func (s *CreateToiletReq) GetType() CreateToiletReqType {
	return s.Type
}

// GetMemo returns the value of Memo.
func (s *CreateToiletReq) GetMemo() OptString {
	return s.Memo
}

// GetCat returns the value of Cat.
func (s *CreateToiletReq) GetCat() OptUUID {
	return s.Cat
}

// SetTime sets the value of Time.
func (s *CreateToiletReq) SetTime(val time.Time) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *CreateToiletReq) SetType(val CreateToiletReqType) {
	s.Type = val
}

// SetMemo sets the value of Memo.
func (s *CreateToiletReq) SetMemo(val OptString) {
	s.Memo = val
}

// SetCat sets the value of Cat.
func (s *CreateToiletReq) SetCat(val OptUUID) {
	s.Cat = val
}

type CreateToiletReqType string

const (
	CreateToiletReqTypePee CreateToiletReqType = "pee"
	CreateToiletReqTypePoo CreateToiletReqType = "poo"
)

// MarshalText implements encoding.TextMarshaler.
func (s CreateToiletReqType) MarshalText() ([]byte, error) {
	switch s {
	case CreateToiletReqTypePee:
		return []byte(s), nil
	case CreateToiletReqTypePoo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateToiletReqType) UnmarshalText(data []byte) error {
	switch CreateToiletReqType(data) {
	case CreateToiletReqTypePee:
		*s = CreateToiletReqTypePee
		return nil
	case CreateToiletReqTypePoo:
		*s = CreateToiletReqTypePoo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateUserReq struct {
	Name      string      `json:"name"`
	Email     string      `json:"email"`
	CreatedAt time.Time   `json:"created_at"`
	UpdatedAt time.Time   `json:"updated_at"`
	Password  string      `json:"password"`
	Cats      []uuid.UUID `json:"cats"`
}

// GetName returns the value of Name.
func (s *CreateUserReq) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *CreateUserReq) GetEmail() string {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CreateUserReq) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CreateUserReq) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetPassword returns the value of Password.
func (s *CreateUserReq) GetPassword() string {
	return s.Password
}

// GetCats returns the value of Cats.
func (s *CreateUserReq) GetCats() []uuid.UUID {
	return s.Cats
}

// SetName sets the value of Name.
func (s *CreateUserReq) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *CreateUserReq) SetEmail(val string) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CreateUserReq) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CreateUserReq) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetPassword sets the value of Password.
func (s *CreateUserReq) SetPassword(val string) {
	s.Password = val
}

// SetCats sets the value of Cats.
func (s *CreateUserReq) SetCats(val []uuid.UUID) {
	s.Cats = val
}

// DeleteCatNoContent is response for DeleteCat operation.
type DeleteCatNoContent struct{}

func (*DeleteCatNoContent) deleteCatRes() {}

// DeleteToiletNoContent is response for DeleteToilet operation.
type DeleteToiletNoContent struct{}

func (*DeleteToiletNoContent) deleteToiletRes() {}

// DeleteUserNoContent is response for DeleteUser operation.
type DeleteUserNoContent struct{}

func (*DeleteUserNoContent) deleteUserRes() {}

type ListCatOKApplicationJSON []CatList

func (*ListCatOKApplicationJSON) listCatRes() {}

type ListCatToiletsOKApplicationJSON []CatToiletsList

func (*ListCatToiletsOKApplicationJSON) listCatToiletsRes() {}

type ListToiletOKApplicationJSON []ToiletList

func (*ListToiletOKApplicationJSON) listToiletRes() {}

type ListUserCatsOKApplicationJSON []UserCatsList

func (*ListUserCatsOKApplicationJSON) listUserCatsRes() {}

type ListUserOKApplicationJSON []UserList

func (*ListUserOKApplicationJSON) listUserRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateCatReqSex returns new OptUpdateCatReqSex with value set to v.
func NewOptUpdateCatReqSex(v UpdateCatReqSex) OptUpdateCatReqSex {
	return OptUpdateCatReqSex{
		Value: v,
		Set:   true,
	}
}

// OptUpdateCatReqSex is optional UpdateCatReqSex.
type OptUpdateCatReqSex struct {
	Value UpdateCatReqSex
	Set   bool
}

// IsSet returns true if OptUpdateCatReqSex was set.
func (o OptUpdateCatReqSex) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateCatReqSex) Reset() {
	var v UpdateCatReqSex
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateCatReqSex) SetTo(v UpdateCatReqSex) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateCatReqSex) Get() (v UpdateCatReqSex, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateCatReqSex) Or(d UpdateCatReqSex) UpdateCatReqSex {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateToiletReqType returns new OptUpdateToiletReqType with value set to v.
func NewOptUpdateToiletReqType(v UpdateToiletReqType) OptUpdateToiletReqType {
	return OptUpdateToiletReqType{
		Value: v,
		Set:   true,
	}
}

// OptUpdateToiletReqType is optional UpdateToiletReqType.
type OptUpdateToiletReqType struct {
	Value UpdateToiletReqType
	Set   bool
}

// IsSet returns true if OptUpdateToiletReqType was set.
func (o OptUpdateToiletReqType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateToiletReqType) Reset() {
	var v UpdateToiletReqType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateToiletReqType) SetTo(v UpdateToiletReqType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateToiletReqType) Get() (v UpdateToiletReqType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateToiletReqType) Or(d UpdateToiletReqType) UpdateToiletReqType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createCatRes()      {}
func (*R400) createToiletRes()   {}
func (*R400) createUserRes()     {}
func (*R400) deleteCatRes()      {}
func (*R400) deleteToiletRes()   {}
func (*R400) deleteUserRes()     {}
func (*R400) listCatRes()        {}
func (*R400) listCatToiletsRes() {}
func (*R400) listToiletRes()     {}
func (*R400) listUserCatsRes()   {}
func (*R400) listUserRes()       {}
func (*R400) readCatOwnerRes()   {}
func (*R400) readCatRes()        {}
func (*R400) readToiletCatRes()  {}
func (*R400) readToiletRes()     {}
func (*R400) readUserRes()       {}
func (*R400) updateCatRes()      {}
func (*R400) updateToiletRes()   {}
func (*R400) updateUserRes()     {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deleteCatRes()      {}
func (*R404) deleteToiletRes()   {}
func (*R404) deleteUserRes()     {}
func (*R404) listCatRes()        {}
func (*R404) listCatToiletsRes() {}
func (*R404) listToiletRes()     {}
func (*R404) listUserCatsRes()   {}
func (*R404) listUserRes()       {}
func (*R404) readCatOwnerRes()   {}
func (*R404) readCatRes()        {}
func (*R404) readToiletCatRes()  {}
func (*R404) readToiletRes()     {}
func (*R404) readUserRes()       {}
func (*R404) updateCatRes()      {}
func (*R404) updateToiletRes()   {}
func (*R404) updateUserRes()     {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createCatRes()      {}
func (*R409) createToiletRes()   {}
func (*R409) createUserRes()     {}
func (*R409) deleteCatRes()      {}
func (*R409) deleteToiletRes()   {}
func (*R409) deleteUserRes()     {}
func (*R409) listCatRes()        {}
func (*R409) listCatToiletsRes() {}
func (*R409) listToiletRes()     {}
func (*R409) listUserCatsRes()   {}
func (*R409) listUserRes()       {}
func (*R409) readCatOwnerRes()   {}
func (*R409) readCatRes()        {}
func (*R409) readToiletCatRes()  {}
func (*R409) readToiletRes()     {}
func (*R409) readUserRes()       {}
func (*R409) updateCatRes()      {}
func (*R409) updateToiletRes()   {}
func (*R409) updateUserRes()     {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createCatRes()      {}
func (*R500) createToiletRes()   {}
func (*R500) createUserRes()     {}
func (*R500) deleteCatRes()      {}
func (*R500) deleteToiletRes()   {}
func (*R500) deleteUserRes()     {}
func (*R500) listCatRes()        {}
func (*R500) listCatToiletsRes() {}
func (*R500) listToiletRes()     {}
func (*R500) listUserCatsRes()   {}
func (*R500) listUserRes()       {}
func (*R500) readCatOwnerRes()   {}
func (*R500) readCatRes()        {}
func (*R500) readToiletCatRes()  {}
func (*R500) readToiletRes()     {}
func (*R500) readUserRes()       {}
func (*R500) updateCatRes()      {}
func (*R500) updateToiletRes()   {}
func (*R500) updateUserRes()     {}

// Ref: #/components/schemas/Toilet_CatRead
type ToiletCatRead struct {
	ID       uuid.UUID        `json:"id"`
	Name     string           `json:"name"`
	Birthday OptDateTime      `json:"birthday"`
	Sex      ToiletCatReadSex `json:"sex"`
	Weight   OptInt           `json:"weight"`
}

// GetID returns the value of ID.
func (s *ToiletCatRead) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ToiletCatRead) GetName() string {
	return s.Name
}

// GetBirthday returns the value of Birthday.
func (s *ToiletCatRead) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetSex returns the value of Sex.
func (s *ToiletCatRead) GetSex() ToiletCatReadSex {
	return s.Sex
}

// GetWeight returns the value of Weight.
func (s *ToiletCatRead) GetWeight() OptInt {
	return s.Weight
}

// SetID sets the value of ID.
func (s *ToiletCatRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ToiletCatRead) SetName(val string) {
	s.Name = val
}

// SetBirthday sets the value of Birthday.
func (s *ToiletCatRead) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetSex sets the value of Sex.
func (s *ToiletCatRead) SetSex(val ToiletCatReadSex) {
	s.Sex = val
}

// SetWeight sets the value of Weight.
func (s *ToiletCatRead) SetWeight(val OptInt) {
	s.Weight = val
}

func (*ToiletCatRead) readToiletCatRes() {}

type ToiletCatReadSex string

const (
	ToiletCatReadSexMale   ToiletCatReadSex = "male"
	ToiletCatReadSexFemale ToiletCatReadSex = "female"
)

// MarshalText implements encoding.TextMarshaler.
func (s ToiletCatReadSex) MarshalText() ([]byte, error) {
	switch s {
	case ToiletCatReadSexMale:
		return []byte(s), nil
	case ToiletCatReadSexFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ToiletCatReadSex) UnmarshalText(data []byte) error {
	switch ToiletCatReadSex(data) {
	case ToiletCatReadSexMale:
		*s = ToiletCatReadSexMale
		return nil
	case ToiletCatReadSexFemale:
		*s = ToiletCatReadSexFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ToiletCreate
type ToiletCreate struct {
	ID   int              `json:"id"`
	Time time.Time        `json:"time"`
	Type ToiletCreateType `json:"type"`
	Memo OptString        `json:"memo"`
}

// GetID returns the value of ID.
func (s *ToiletCreate) GetID() int {
	return s.ID
}

// GetTime returns the value of Time.
func (s *ToiletCreate) GetTime() time.Time {
	return s.Time
}

// GetType returns the value of Type.
func (s *ToiletCreate) GetType() ToiletCreateType {
	return s.Type
}

// GetMemo returns the value of Memo.
func (s *ToiletCreate) GetMemo() OptString {
	return s.Memo
}

// SetID sets the value of ID.
func (s *ToiletCreate) SetID(val int) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *ToiletCreate) SetTime(val time.Time) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *ToiletCreate) SetType(val ToiletCreateType) {
	s.Type = val
}

// SetMemo sets the value of Memo.
func (s *ToiletCreate) SetMemo(val OptString) {
	s.Memo = val
}

func (*ToiletCreate) createToiletRes() {}

type ToiletCreateType string

const (
	ToiletCreateTypePee ToiletCreateType = "pee"
	ToiletCreateTypePoo ToiletCreateType = "poo"
)

// MarshalText implements encoding.TextMarshaler.
func (s ToiletCreateType) MarshalText() ([]byte, error) {
	switch s {
	case ToiletCreateTypePee:
		return []byte(s), nil
	case ToiletCreateTypePoo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ToiletCreateType) UnmarshalText(data []byte) error {
	switch ToiletCreateType(data) {
	case ToiletCreateTypePee:
		*s = ToiletCreateTypePee
		return nil
	case ToiletCreateTypePoo:
		*s = ToiletCreateTypePoo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ToiletList
type ToiletList struct {
	ID   int            `json:"id"`
	Time time.Time      `json:"time"`
	Type ToiletListType `json:"type"`
	Memo OptString      `json:"memo"`
}

// GetID returns the value of ID.
func (s *ToiletList) GetID() int {
	return s.ID
}

// GetTime returns the value of Time.
func (s *ToiletList) GetTime() time.Time {
	return s.Time
}

// GetType returns the value of Type.
func (s *ToiletList) GetType() ToiletListType {
	return s.Type
}

// GetMemo returns the value of Memo.
func (s *ToiletList) GetMemo() OptString {
	return s.Memo
}

// SetID sets the value of ID.
func (s *ToiletList) SetID(val int) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *ToiletList) SetTime(val time.Time) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *ToiletList) SetType(val ToiletListType) {
	s.Type = val
}

// SetMemo sets the value of Memo.
func (s *ToiletList) SetMemo(val OptString) {
	s.Memo = val
}

type ToiletListType string

const (
	ToiletListTypePee ToiletListType = "pee"
	ToiletListTypePoo ToiletListType = "poo"
)

// MarshalText implements encoding.TextMarshaler.
func (s ToiletListType) MarshalText() ([]byte, error) {
	switch s {
	case ToiletListTypePee:
		return []byte(s), nil
	case ToiletListTypePoo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ToiletListType) UnmarshalText(data []byte) error {
	switch ToiletListType(data) {
	case ToiletListTypePee:
		*s = ToiletListTypePee
		return nil
	case ToiletListTypePoo:
		*s = ToiletListTypePoo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ToiletRead
type ToiletRead struct {
	ID   int            `json:"id"`
	Time time.Time      `json:"time"`
	Type ToiletReadType `json:"type"`
	Memo OptString      `json:"memo"`
}

// GetID returns the value of ID.
func (s *ToiletRead) GetID() int {
	return s.ID
}

// GetTime returns the value of Time.
func (s *ToiletRead) GetTime() time.Time {
	return s.Time
}

// GetType returns the value of Type.
func (s *ToiletRead) GetType() ToiletReadType {
	return s.Type
}

// GetMemo returns the value of Memo.
func (s *ToiletRead) GetMemo() OptString {
	return s.Memo
}

// SetID sets the value of ID.
func (s *ToiletRead) SetID(val int) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *ToiletRead) SetTime(val time.Time) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *ToiletRead) SetType(val ToiletReadType) {
	s.Type = val
}

// SetMemo sets the value of Memo.
func (s *ToiletRead) SetMemo(val OptString) {
	s.Memo = val
}

func (*ToiletRead) readToiletRes() {}

type ToiletReadType string

const (
	ToiletReadTypePee ToiletReadType = "pee"
	ToiletReadTypePoo ToiletReadType = "poo"
)

// MarshalText implements encoding.TextMarshaler.
func (s ToiletReadType) MarshalText() ([]byte, error) {
	switch s {
	case ToiletReadTypePee:
		return []byte(s), nil
	case ToiletReadTypePoo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ToiletReadType) UnmarshalText(data []byte) error {
	switch ToiletReadType(data) {
	case ToiletReadTypePee:
		*s = ToiletReadTypePee
		return nil
	case ToiletReadTypePoo:
		*s = ToiletReadTypePoo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ToiletUpdate
type ToiletUpdate struct {
	ID   int              `json:"id"`
	Time time.Time        `json:"time"`
	Type ToiletUpdateType `json:"type"`
	Memo OptString        `json:"memo"`
}

// GetID returns the value of ID.
func (s *ToiletUpdate) GetID() int {
	return s.ID
}

// GetTime returns the value of Time.
func (s *ToiletUpdate) GetTime() time.Time {
	return s.Time
}

// GetType returns the value of Type.
func (s *ToiletUpdate) GetType() ToiletUpdateType {
	return s.Type
}

// GetMemo returns the value of Memo.
func (s *ToiletUpdate) GetMemo() OptString {
	return s.Memo
}

// SetID sets the value of ID.
func (s *ToiletUpdate) SetID(val int) {
	s.ID = val
}

// SetTime sets the value of Time.
func (s *ToiletUpdate) SetTime(val time.Time) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *ToiletUpdate) SetType(val ToiletUpdateType) {
	s.Type = val
}

// SetMemo sets the value of Memo.
func (s *ToiletUpdate) SetMemo(val OptString) {
	s.Memo = val
}

func (*ToiletUpdate) updateToiletRes() {}

type ToiletUpdateType string

const (
	ToiletUpdateTypePee ToiletUpdateType = "pee"
	ToiletUpdateTypePoo ToiletUpdateType = "poo"
)

// MarshalText implements encoding.TextMarshaler.
func (s ToiletUpdateType) MarshalText() ([]byte, error) {
	switch s {
	case ToiletUpdateTypePee:
		return []byte(s), nil
	case ToiletUpdateTypePoo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ToiletUpdateType) UnmarshalText(data []byte) error {
	switch ToiletUpdateType(data) {
	case ToiletUpdateTypePee:
		*s = ToiletUpdateTypePee
		return nil
	case ToiletUpdateTypePoo:
		*s = ToiletUpdateTypePoo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateCatReq struct {
	Name     OptString          `json:"name"`
	Birthday OptDateTime        `json:"birthday"`
	Sex      OptUpdateCatReqSex `json:"sex"`
	Weight   OptInt             `json:"weight"`
	Owner    OptUUID            `json:"owner"`
	Toilets  []int              `json:"toilets"`
}

// GetName returns the value of Name.
func (s *UpdateCatReq) GetName() OptString {
	return s.Name
}

// GetBirthday returns the value of Birthday.
func (s *UpdateCatReq) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetSex returns the value of Sex.
func (s *UpdateCatReq) GetSex() OptUpdateCatReqSex {
	return s.Sex
}

// GetWeight returns the value of Weight.
func (s *UpdateCatReq) GetWeight() OptInt {
	return s.Weight
}

// GetOwner returns the value of Owner.
func (s *UpdateCatReq) GetOwner() OptUUID {
	return s.Owner
}

// GetToilets returns the value of Toilets.
func (s *UpdateCatReq) GetToilets() []int {
	return s.Toilets
}

// SetName sets the value of Name.
func (s *UpdateCatReq) SetName(val OptString) {
	s.Name = val
}

// SetBirthday sets the value of Birthday.
func (s *UpdateCatReq) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetSex sets the value of Sex.
func (s *UpdateCatReq) SetSex(val OptUpdateCatReqSex) {
	s.Sex = val
}

// SetWeight sets the value of Weight.
func (s *UpdateCatReq) SetWeight(val OptInt) {
	s.Weight = val
}

// SetOwner sets the value of Owner.
func (s *UpdateCatReq) SetOwner(val OptUUID) {
	s.Owner = val
}

// SetToilets sets the value of Toilets.
func (s *UpdateCatReq) SetToilets(val []int) {
	s.Toilets = val
}

type UpdateCatReqSex string

const (
	UpdateCatReqSexMale   UpdateCatReqSex = "male"
	UpdateCatReqSexFemale UpdateCatReqSex = "female"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateCatReqSex) MarshalText() ([]byte, error) {
	switch s {
	case UpdateCatReqSexMale:
		return []byte(s), nil
	case UpdateCatReqSexFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateCatReqSex) UnmarshalText(data []byte) error {
	switch UpdateCatReqSex(data) {
	case UpdateCatReqSexMale:
		*s = UpdateCatReqSexMale
		return nil
	case UpdateCatReqSexFemale:
		*s = UpdateCatReqSexFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateToiletReq struct {
	Time OptDateTime            `json:"time"`
	Type OptUpdateToiletReqType `json:"type"`
	Memo OptString              `json:"memo"`
	Cat  OptUUID                `json:"cat"`
}

// GetTime returns the value of Time.
func (s *UpdateToiletReq) GetTime() OptDateTime {
	return s.Time
}

// GetType returns the value of Type.
func (s *UpdateToiletReq) GetType() OptUpdateToiletReqType {
	return s.Type
}

// GetMemo returns the value of Memo.
func (s *UpdateToiletReq) GetMemo() OptString {
	return s.Memo
}

// GetCat returns the value of Cat.
func (s *UpdateToiletReq) GetCat() OptUUID {
	return s.Cat
}

// SetTime sets the value of Time.
func (s *UpdateToiletReq) SetTime(val OptDateTime) {
	s.Time = val
}

// SetType sets the value of Type.
func (s *UpdateToiletReq) SetType(val OptUpdateToiletReqType) {
	s.Type = val
}

// SetMemo sets the value of Memo.
func (s *UpdateToiletReq) SetMemo(val OptString) {
	s.Memo = val
}

// SetCat sets the value of Cat.
func (s *UpdateToiletReq) SetCat(val OptUUID) {
	s.Cat = val
}

type UpdateToiletReqType string

const (
	UpdateToiletReqTypePee UpdateToiletReqType = "pee"
	UpdateToiletReqTypePoo UpdateToiletReqType = "poo"
)

// MarshalText implements encoding.TextMarshaler.
func (s UpdateToiletReqType) MarshalText() ([]byte, error) {
	switch s {
	case UpdateToiletReqTypePee:
		return []byte(s), nil
	case UpdateToiletReqTypePoo:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateToiletReqType) UnmarshalText(data []byte) error {
	switch UpdateToiletReqType(data) {
	case UpdateToiletReqTypePee:
		*s = UpdateToiletReqTypePee
		return nil
	case UpdateToiletReqTypePoo:
		*s = UpdateToiletReqTypePoo
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateUserReq struct {
	Name      OptString   `json:"name"`
	Email     OptString   `json:"email"`
	UpdatedAt OptDateTime `json:"updated_at"`
	Password  OptString   `json:"password"`
	Cats      []uuid.UUID `json:"cats"`
}

// GetName returns the value of Name.
func (s *UpdateUserReq) GetName() OptString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UpdateUserReq) GetEmail() OptString {
	return s.Email
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UpdateUserReq) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetPassword returns the value of Password.
func (s *UpdateUserReq) GetPassword() OptString {
	return s.Password
}

// GetCats returns the value of Cats.
func (s *UpdateUserReq) GetCats() []uuid.UUID {
	return s.Cats
}

// SetName sets the value of Name.
func (s *UpdateUserReq) SetName(val OptString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UpdateUserReq) SetEmail(val OptString) {
	s.Email = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UpdateUserReq) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetPassword sets the value of Password.
func (s *UpdateUserReq) SetPassword(val OptString) {
	s.Password = val
}

// SetCats sets the value of Cats.
func (s *UpdateUserReq) SetCats(val []uuid.UUID) {
	s.Cats = val
}

// Ref: #/components/schemas/User_CatsList
type UserCatsList struct {
	ID       uuid.UUID       `json:"id"`
	Name     string          `json:"name"`
	Birthday OptDateTime     `json:"birthday"`
	Sex      UserCatsListSex `json:"sex"`
	Weight   OptInt          `json:"weight"`
}

// GetID returns the value of ID.
func (s *UserCatsList) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserCatsList) GetName() string {
	return s.Name
}

// GetBirthday returns the value of Birthday.
func (s *UserCatsList) GetBirthday() OptDateTime {
	return s.Birthday
}

// GetSex returns the value of Sex.
func (s *UserCatsList) GetSex() UserCatsListSex {
	return s.Sex
}

// GetWeight returns the value of Weight.
func (s *UserCatsList) GetWeight() OptInt {
	return s.Weight
}

// SetID sets the value of ID.
func (s *UserCatsList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserCatsList) SetName(val string) {
	s.Name = val
}

// SetBirthday sets the value of Birthday.
func (s *UserCatsList) SetBirthday(val OptDateTime) {
	s.Birthday = val
}

// SetSex sets the value of Sex.
func (s *UserCatsList) SetSex(val UserCatsListSex) {
	s.Sex = val
}

// SetWeight sets the value of Weight.
func (s *UserCatsList) SetWeight(val OptInt) {
	s.Weight = val
}

type UserCatsListSex string

const (
	UserCatsListSexMale   UserCatsListSex = "male"
	UserCatsListSexFemale UserCatsListSex = "female"
)

// MarshalText implements encoding.TextMarshaler.
func (s UserCatsListSex) MarshalText() ([]byte, error) {
	switch s {
	case UserCatsListSexMale:
		return []byte(s), nil
	case UserCatsListSexFemale:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UserCatsListSex) UnmarshalText(data []byte) error {
	switch UserCatsListSex(data) {
	case UserCatsListSexMale:
		*s = UserCatsListSexMale
		return nil
	case UserCatsListSexFemale:
		*s = UserCatsListSexFemale
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/UserCreate
type UserCreate struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *UserCreate) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserCreate) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserCreate) GetEmail() string {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserCreate) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserCreate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *UserCreate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserCreate) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserCreate) SetEmail(val string) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserCreate) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserCreate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*UserCreate) createUserRes() {}

// Ref: #/components/schemas/UserList
type UserList struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *UserList) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserList) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserList) GetEmail() string {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserList) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserList) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *UserList) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserList) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserList) SetEmail(val string) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserList) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserList) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// Ref: #/components/schemas/UserRead
type UserRead struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *UserRead) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserRead) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserRead) GetEmail() string {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *UserRead) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserRead) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserRead) SetEmail(val string) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*UserRead) readUserRes() {}

// Ref: #/components/schemas/UserUpdate
type UserUpdate struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// GetID returns the value of ID.
func (s *UserUpdate) GetID() uuid.UUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *UserUpdate) GetName() string {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *UserUpdate) GetEmail() string {
	return s.Email
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserUpdate) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UserUpdate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *UserUpdate) SetID(val uuid.UUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *UserUpdate) SetName(val string) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *UserUpdate) SetEmail(val string) {
	s.Email = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserUpdate) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UserUpdate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

func (*UserUpdate) updateUserRes() {}
