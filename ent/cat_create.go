// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Shuri-Honda-1101/cat-utils/ent/cat"
	"github.com/Shuri-Honda-1101/cat-utils/ent/toilet"
	"github.com/Shuri-Honda-1101/cat-utils/ent/user"
	"github.com/google/uuid"
)

// CatCreate is the builder for creating a Cat entity.
type CatCreate struct {
	config
	mutation *CatMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *CatCreate) SetName(s string) *CatCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetBirthday sets the "birthday" field.
func (cc *CatCreate) SetBirthday(t time.Time) *CatCreate {
	cc.mutation.SetBirthday(t)
	return cc
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (cc *CatCreate) SetNillableBirthday(t *time.Time) *CatCreate {
	if t != nil {
		cc.SetBirthday(*t)
	}
	return cc
}

// SetSex sets the "sex" field.
func (cc *CatCreate) SetSex(c cat.Sex) *CatCreate {
	cc.mutation.SetSex(c)
	return cc
}

// SetWeight sets the "weight" field.
func (cc *CatCreate) SetWeight(i int) *CatCreate {
	cc.mutation.SetWeight(i)
	return cc
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (cc *CatCreate) SetNillableWeight(i *int) *CatCreate {
	if i != nil {
		cc.SetWeight(*i)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CatCreate) SetID(u uuid.UUID) *CatCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CatCreate) SetNillableID(u *uuid.UUID) *CatCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cc *CatCreate) SetOwnerID(id uuid.UUID) *CatCreate {
	cc.mutation.SetOwnerID(id)
	return cc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cc *CatCreate) SetNillableOwnerID(id *uuid.UUID) *CatCreate {
	if id != nil {
		cc = cc.SetOwnerID(*id)
	}
	return cc
}

// SetOwner sets the "owner" edge to the User entity.
func (cc *CatCreate) SetOwner(u *User) *CatCreate {
	return cc.SetOwnerID(u.ID)
}

// AddToiletIDs adds the "toilets" edge to the Toilet entity by IDs.
func (cc *CatCreate) AddToiletIDs(ids ...int) *CatCreate {
	cc.mutation.AddToiletIDs(ids...)
	return cc
}

// AddToilets adds the "toilets" edges to the Toilet entity.
func (cc *CatCreate) AddToilets(t ...*Toilet) *CatCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddToiletIDs(ids...)
}

// Mutation returns the CatMutation object of the builder.
func (cc *CatCreate) Mutation() *CatMutation {
	return cc.mutation
}

// Save creates the Cat in the database.
func (cc *CatCreate) Save(ctx context.Context) (*Cat, error) {
	cc.defaults()
	return withHooks[*Cat, CatMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CatCreate) SaveX(ctx context.Context) *Cat {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CatCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CatCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CatCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := cat.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CatCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Cat.name"`)}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := cat.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Cat.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`ent: missing required field "Cat.sex"`)}
	}
	if v, ok := cc.mutation.Sex(); ok {
		if err := cat.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`ent: validator failed for field "Cat.sex": %w`, err)}
		}
	}
	return nil
}

func (cc *CatCreate) sqlSave(ctx context.Context) (*Cat, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CatCreate) createSpec() (*Cat, *sqlgraph.CreateSpec) {
	var (
		_node = &Cat{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cat.Table, sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(cat.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Birthday(); ok {
		_spec.SetField(cat.FieldBirthday, field.TypeTime, value)
		_node.Birthday = value
	}
	if value, ok := cc.mutation.Sex(); ok {
		_spec.SetField(cat.FieldSex, field.TypeEnum, value)
		_node.Sex = value
	}
	if value, ok := cc.mutation.Weight(); ok {
		_spec.SetField(cat.FieldWeight, field.TypeInt, value)
		_node.Weight = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.OwnerTable,
			Columns: []string{cat.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_cats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ToiletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.ToiletsTable,
			Columns: []string{cat.ToiletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CatCreateBulk is the builder for creating many Cat entities in bulk.
type CatCreateBulk struct {
	config
	builders []*CatCreate
}

// Save creates the Cat entities in the database.
func (ccb *CatCreateBulk) Save(ctx context.Context) ([]*Cat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cat, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CatCreateBulk) SaveX(ctx context.Context) []*Cat {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CatCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CatCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
