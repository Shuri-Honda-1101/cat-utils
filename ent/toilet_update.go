// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Shuri-Honda-1101/cat-utils/ent/cat"
	"github.com/Shuri-Honda-1101/cat-utils/ent/predicate"
	"github.com/Shuri-Honda-1101/cat-utils/ent/toilet"
	"github.com/google/uuid"
)

// ToiletUpdate is the builder for updating Toilet entities.
type ToiletUpdate struct {
	config
	hooks    []Hook
	mutation *ToiletMutation
}

// Where appends a list predicates to the ToiletUpdate builder.
func (tu *ToiletUpdate) Where(ps ...predicate.Toilet) *ToiletUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTime sets the "time" field.
func (tu *ToiletUpdate) SetTime(t time.Time) *ToiletUpdate {
	tu.mutation.SetTime(t)
	return tu
}

// SetType sets the "type" field.
func (tu *ToiletUpdate) SetType(t toilet.Type) *ToiletUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetMemo sets the "memo" field.
func (tu *ToiletUpdate) SetMemo(s string) *ToiletUpdate {
	tu.mutation.SetMemo(s)
	return tu
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (tu *ToiletUpdate) SetNillableMemo(s *string) *ToiletUpdate {
	if s != nil {
		tu.SetMemo(*s)
	}
	return tu
}

// ClearMemo clears the value of the "memo" field.
func (tu *ToiletUpdate) ClearMemo() *ToiletUpdate {
	tu.mutation.ClearMemo()
	return tu
}

// SetCatID sets the "cat" edge to the Cat entity by ID.
func (tu *ToiletUpdate) SetCatID(id uuid.UUID) *ToiletUpdate {
	tu.mutation.SetCatID(id)
	return tu
}

// SetNillableCatID sets the "cat" edge to the Cat entity by ID if the given value is not nil.
func (tu *ToiletUpdate) SetNillableCatID(id *uuid.UUID) *ToiletUpdate {
	if id != nil {
		tu = tu.SetCatID(*id)
	}
	return tu
}

// SetCat sets the "cat" edge to the Cat entity.
func (tu *ToiletUpdate) SetCat(c *Cat) *ToiletUpdate {
	return tu.SetCatID(c.ID)
}

// Mutation returns the ToiletMutation object of the builder.
func (tu *ToiletUpdate) Mutation() *ToiletMutation {
	return tu.mutation
}

// ClearCat clears the "cat" edge to the Cat entity.
func (tu *ToiletUpdate) ClearCat() *ToiletUpdate {
	tu.mutation.ClearCat()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ToiletUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, ToiletMutation](ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ToiletUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ToiletUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ToiletUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *ToiletUpdate) check() error {
	if v, ok := tu.mutation.GetType(); ok {
		if err := toilet.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Toilet.type": %w`, err)}
		}
	}
	return nil
}

func (tu *ToiletUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(toilet.Table, toilet.Columns, sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Time(); ok {
		_spec.SetField(toilet.FieldTime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(toilet.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.Memo(); ok {
		_spec.SetField(toilet.FieldMemo, field.TypeString, value)
	}
	if tu.mutation.MemoCleared() {
		_spec.ClearField(toilet.FieldMemo, field.TypeString)
	}
	if tu.mutation.CatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toilet.CatTable,
			Columns: []string{toilet.CatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toilet.CatTable,
			Columns: []string{toilet.CatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toilet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ToiletUpdateOne is the builder for updating a single Toilet entity.
type ToiletUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ToiletMutation
}

// SetTime sets the "time" field.
func (tuo *ToiletUpdateOne) SetTime(t time.Time) *ToiletUpdateOne {
	tuo.mutation.SetTime(t)
	return tuo
}

// SetType sets the "type" field.
func (tuo *ToiletUpdateOne) SetType(t toilet.Type) *ToiletUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetMemo sets the "memo" field.
func (tuo *ToiletUpdateOne) SetMemo(s string) *ToiletUpdateOne {
	tuo.mutation.SetMemo(s)
	return tuo
}

// SetNillableMemo sets the "memo" field if the given value is not nil.
func (tuo *ToiletUpdateOne) SetNillableMemo(s *string) *ToiletUpdateOne {
	if s != nil {
		tuo.SetMemo(*s)
	}
	return tuo
}

// ClearMemo clears the value of the "memo" field.
func (tuo *ToiletUpdateOne) ClearMemo() *ToiletUpdateOne {
	tuo.mutation.ClearMemo()
	return tuo
}

// SetCatID sets the "cat" edge to the Cat entity by ID.
func (tuo *ToiletUpdateOne) SetCatID(id uuid.UUID) *ToiletUpdateOne {
	tuo.mutation.SetCatID(id)
	return tuo
}

// SetNillableCatID sets the "cat" edge to the Cat entity by ID if the given value is not nil.
func (tuo *ToiletUpdateOne) SetNillableCatID(id *uuid.UUID) *ToiletUpdateOne {
	if id != nil {
		tuo = tuo.SetCatID(*id)
	}
	return tuo
}

// SetCat sets the "cat" edge to the Cat entity.
func (tuo *ToiletUpdateOne) SetCat(c *Cat) *ToiletUpdateOne {
	return tuo.SetCatID(c.ID)
}

// Mutation returns the ToiletMutation object of the builder.
func (tuo *ToiletUpdateOne) Mutation() *ToiletMutation {
	return tuo.mutation
}

// ClearCat clears the "cat" edge to the Cat entity.
func (tuo *ToiletUpdateOne) ClearCat() *ToiletUpdateOne {
	tuo.mutation.ClearCat()
	return tuo
}

// Where appends a list predicates to the ToiletUpdate builder.
func (tuo *ToiletUpdateOne) Where(ps ...predicate.Toilet) *ToiletUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ToiletUpdateOne) Select(field string, fields ...string) *ToiletUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Toilet entity.
func (tuo *ToiletUpdateOne) Save(ctx context.Context) (*Toilet, error) {
	return withHooks[*Toilet, ToiletMutation](ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ToiletUpdateOne) SaveX(ctx context.Context) *Toilet {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ToiletUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ToiletUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *ToiletUpdateOne) check() error {
	if v, ok := tuo.mutation.GetType(); ok {
		if err := toilet.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Toilet.type": %w`, err)}
		}
	}
	return nil
}

func (tuo *ToiletUpdateOne) sqlSave(ctx context.Context) (_node *Toilet, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(toilet.Table, toilet.Columns, sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Toilet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, toilet.FieldID)
		for _, f := range fields {
			if !toilet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != toilet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Time(); ok {
		_spec.SetField(toilet.FieldTime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(toilet.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.Memo(); ok {
		_spec.SetField(toilet.FieldMemo, field.TypeString, value)
	}
	if tuo.mutation.MemoCleared() {
		_spec.ClearField(toilet.FieldMemo, field.TypeString)
	}
	if tuo.mutation.CatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toilet.CatTable,
			Columns: []string{toilet.CatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   toilet.CatTable,
			Columns: []string{toilet.CatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Toilet{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{toilet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
