// Code generated by ent, DO NOT EDIT.

package toilet

import (
	"fmt"
)

const (
	// Label holds the string label denoting the toilet type in the database.
	Label = "toilet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldMemo holds the string denoting the memo field in the database.
	FieldMemo = "memo"
	// EdgeCat holds the string denoting the cat edge name in mutations.
	EdgeCat = "cat"
	// Table holds the table name of the toilet in the database.
	Table = "toilets"
	// CatTable is the table that holds the cat relation/edge.
	CatTable = "toilets"
	// CatInverseTable is the table name for the Cat entity.
	// It exists in this package in order to avoid circular dependency with the "cat" package.
	CatInverseTable = "cats"
	// CatColumn is the table column denoting the cat relation/edge.
	CatColumn = "cat_toilets"
)

// Columns holds all SQL columns for toilet fields.
var Columns = []string{
	FieldID,
	FieldTime,
	FieldType,
	FieldMemo,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "toilets"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"cat_toilets",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePee Type = "pee"
	TypePoo Type = "poo"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePee, TypePoo:
		return nil
	default:
		return fmt.Errorf("toilet: invalid enum value for type field: %q", _type)
	}
}
