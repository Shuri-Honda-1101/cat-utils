{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/cats": {
      "get": {
        "tags": [
          "Cat"
        ],
        "summary": "List Cats",
        "description": "List Cats.",
        "operationId": "listCat",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Cat list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CatList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Cat"
        ],
        "summary": "Create a new Cat",
        "description": "Creates a new Cat and persists it to storage.",
        "operationId": "createCat",
        "requestBody": {
          "description": "Cat to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "birthday": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "sex": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ]
                  },
                  "weight": {
                    "type": "integer"
                  },
                  "owner": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "toilets": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                },
                "required": [
                  "name",
                  "sex"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Cat created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cats/{id}": {
      "get": {
        "tags": [
          "Cat"
        ],
        "summary": "Find a Cat by ID",
        "description": "Finds the Cat with the requested ID and returns it.",
        "operationId": "readCat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Cat",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cat with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Cat"
        ],
        "summary": "Deletes a Cat by ID",
        "description": "Deletes the Cat with the requested ID.",
        "operationId": "deleteCat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Cat",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Cat with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Cat"
        ],
        "summary": "Updates a Cat",
        "description": "Updates a Cat and persists changes to storage.",
        "operationId": "updateCat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Cat",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Cat properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "birthday": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "sex": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ]
                  },
                  "weight": {
                    "type": "integer"
                  },
                  "owner": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "toilets": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Cat updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cats/{id}/owner": {
      "get": {
        "tags": [
          "Cat"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Cat with the given ID",
        "operationId": "readCatOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Cat",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Cat with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cat_OwnerRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/cats/{id}/toilets": {
      "get": {
        "tags": [
          "Cat"
        ],
        "summary": "List attached Toilets",
        "description": "List attached Toilets.",
        "operationId": "listCatToilets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Cat",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Cats list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cat_ToiletsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/toilets": {
      "get": {
        "tags": [
          "Toilet"
        ],
        "summary": "List Toilets",
        "description": "List Toilets.",
        "operationId": "listToilet",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Toilet list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToiletList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Toilet"
        ],
        "summary": "Create a new Toilet",
        "description": "Creates a new Toilet and persists it to storage.",
        "operationId": "createToilet",
        "requestBody": {
          "description": "Toilet to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "pee",
                      "poo"
                    ]
                  },
                  "memo": {
                    "type": "string"
                  },
                  "cat": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "required": [
                  "time",
                  "type"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Toilet created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToiletCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/toilets/{id}": {
      "get": {
        "tags": [
          "Toilet"
        ],
        "summary": "Find a Toilet by ID",
        "description": "Finds the Toilet with the requested ID and returns it.",
        "operationId": "readToilet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Toilet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Toilet with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToiletRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Toilet"
        ],
        "summary": "Deletes a Toilet by ID",
        "description": "Deletes the Toilet with the requested ID.",
        "operationId": "deleteToilet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Toilet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Toilet with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Toilet"
        ],
        "summary": "Updates a Toilet",
        "description": "Updates a Toilet and persists changes to storage.",
        "operationId": "updateToilet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Toilet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Toilet properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "pee",
                      "poo"
                    ]
                  },
                  "memo": {
                    "type": "string"
                  },
                  "cat": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Toilet updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToiletUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/toilets/{id}/cat": {
      "get": {
        "tags": [
          "Toilet"
        ],
        "summary": "Find the attached Cat",
        "description": "Find the attached Cat of the Toilet with the given ID",
        "operationId": "readToiletCat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Toilet",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cat attached to Toilet with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Toilet_CatRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "password": {
                    "type": "string"
                  },
                  "cats": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "name",
                  "email",
                  "created_at",
                  "updated_at",
                  "password"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "password": {
                    "type": "string"
                  },
                  "cats": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/cats": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Cats",
        "description": "List attached Cats.",
        "operationId": "listUserCats",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_CatsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Cat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "weight": {
            "type": "integer"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "toilets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Toilet"
            }
          }
        },
        "required": [
          "id",
          "name",
          "sex"
        ]
      },
      "CatCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "weight": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "sex"
        ]
      },
      "CatList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "weight": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "sex"
        ]
      },
      "CatRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "weight": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "sex"
        ]
      },
      "CatUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "weight": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "sex"
        ]
      },
      "Cat_OwnerRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "created_at",
          "updated_at"
        ]
      },
      "Cat_ToiletsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "pee",
              "poo"
            ]
          },
          "memo": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "time",
          "type"
        ]
      },
      "Toilet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "pee",
              "poo"
            ]
          },
          "memo": {
            "type": "string"
          },
          "cat": {
            "$ref": "#/components/schemas/Cat"
          }
        },
        "required": [
          "id",
          "time",
          "type"
        ]
      },
      "ToiletCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "pee",
              "poo"
            ]
          },
          "memo": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "time",
          "type"
        ]
      },
      "ToiletList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "pee",
              "poo"
            ]
          },
          "memo": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "time",
          "type"
        ]
      },
      "ToiletRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "pee",
              "poo"
            ]
          },
          "memo": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "time",
          "type"
        ]
      },
      "ToiletUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "type": "string",
            "enum": [
              "pee",
              "poo"
            ]
          },
          "memo": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "time",
          "type"
        ]
      },
      "Toilet_CatRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "weight": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "sex"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "password": {
            "type": "string"
          },
          "cats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cat"
            }
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "created_at",
          "updated_at",
          "password"
        ]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "created_at",
          "updated_at"
        ]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "created_at",
          "updated_at"
        ]
      },
      "UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "created_at",
          "updated_at"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "created_at",
          "updated_at"
        ]
      },
      "User_CatsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "sex": {
            "type": "string",
            "enum": [
              "male",
              "female"
            ]
          },
          "weight": {
            "type": "integer"
          }
        },
        "required": [
          "id",
          "name",
          "sex"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}