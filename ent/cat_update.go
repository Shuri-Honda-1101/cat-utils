// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Shuri-Honda-1101/cat-utils/ent/cat"
	"github.com/Shuri-Honda-1101/cat-utils/ent/predicate"
	"github.com/Shuri-Honda-1101/cat-utils/ent/toilet"
	"github.com/Shuri-Honda-1101/cat-utils/ent/user"
	"github.com/google/uuid"
)

// CatUpdate is the builder for updating Cat entities.
type CatUpdate struct {
	config
	hooks    []Hook
	mutation *CatMutation
}

// Where appends a list predicates to the CatUpdate builder.
func (cu *CatUpdate) Where(ps ...predicate.Cat) *CatUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *CatUpdate) SetName(s string) *CatUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetBirthday sets the "birthday" field.
func (cu *CatUpdate) SetBirthday(t time.Time) *CatUpdate {
	cu.mutation.SetBirthday(t)
	return cu
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (cu *CatUpdate) SetNillableBirthday(t *time.Time) *CatUpdate {
	if t != nil {
		cu.SetBirthday(*t)
	}
	return cu
}

// ClearBirthday clears the value of the "birthday" field.
func (cu *CatUpdate) ClearBirthday() *CatUpdate {
	cu.mutation.ClearBirthday()
	return cu
}

// SetSex sets the "sex" field.
func (cu *CatUpdate) SetSex(c cat.Sex) *CatUpdate {
	cu.mutation.SetSex(c)
	return cu
}

// SetWeight sets the "weight" field.
func (cu *CatUpdate) SetWeight(i int) *CatUpdate {
	cu.mutation.ResetWeight()
	cu.mutation.SetWeight(i)
	return cu
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (cu *CatUpdate) SetNillableWeight(i *int) *CatUpdate {
	if i != nil {
		cu.SetWeight(*i)
	}
	return cu
}

// AddWeight adds i to the "weight" field.
func (cu *CatUpdate) AddWeight(i int) *CatUpdate {
	cu.mutation.AddWeight(i)
	return cu
}

// ClearWeight clears the value of the "weight" field.
func (cu *CatUpdate) ClearWeight() *CatUpdate {
	cu.mutation.ClearWeight()
	return cu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cu *CatUpdate) SetOwnerID(id uuid.UUID) *CatUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cu *CatUpdate) SetNillableOwnerID(id *uuid.UUID) *CatUpdate {
	if id != nil {
		cu = cu.SetOwnerID(*id)
	}
	return cu
}

// SetOwner sets the "owner" edge to the User entity.
func (cu *CatUpdate) SetOwner(u *User) *CatUpdate {
	return cu.SetOwnerID(u.ID)
}

// AddToiletIDs adds the "toilets" edge to the Toilet entity by IDs.
func (cu *CatUpdate) AddToiletIDs(ids ...int) *CatUpdate {
	cu.mutation.AddToiletIDs(ids...)
	return cu
}

// AddToilets adds the "toilets" edges to the Toilet entity.
func (cu *CatUpdate) AddToilets(t ...*Toilet) *CatUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddToiletIDs(ids...)
}

// Mutation returns the CatMutation object of the builder.
func (cu *CatUpdate) Mutation() *CatMutation {
	return cu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cu *CatUpdate) ClearOwner() *CatUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// ClearToilets clears all "toilets" edges to the Toilet entity.
func (cu *CatUpdate) ClearToilets() *CatUpdate {
	cu.mutation.ClearToilets()
	return cu
}

// RemoveToiletIDs removes the "toilets" edge to Toilet entities by IDs.
func (cu *CatUpdate) RemoveToiletIDs(ids ...int) *CatUpdate {
	cu.mutation.RemoveToiletIDs(ids...)
	return cu
}

// RemoveToilets removes "toilets" edges to Toilet entities.
func (cu *CatUpdate) RemoveToilets(t ...*Toilet) *CatUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveToiletIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CatMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CatUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CatUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CatUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CatUpdate) check() error {
	if v, ok := cu.mutation.Name(); ok {
		if err := cat.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Cat.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Sex(); ok {
		if err := cat.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`ent: validator failed for field "Cat.sex": %w`, err)}
		}
	}
	return nil
}

func (cu *CatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cat.Table, cat.Columns, sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(cat.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Birthday(); ok {
		_spec.SetField(cat.FieldBirthday, field.TypeTime, value)
	}
	if cu.mutation.BirthdayCleared() {
		_spec.ClearField(cat.FieldBirthday, field.TypeTime)
	}
	if value, ok := cu.mutation.Sex(); ok {
		_spec.SetField(cat.FieldSex, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Weight(); ok {
		_spec.SetField(cat.FieldWeight, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedWeight(); ok {
		_spec.AddField(cat.FieldWeight, field.TypeInt, value)
	}
	if cu.mutation.WeightCleared() {
		_spec.ClearField(cat.FieldWeight, field.TypeInt)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.OwnerTable,
			Columns: []string{cat.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.OwnerTable,
			Columns: []string{cat.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ToiletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.ToiletsTable,
			Columns: []string{cat.ToiletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedToiletsIDs(); len(nodes) > 0 && !cu.mutation.ToiletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.ToiletsTable,
			Columns: []string{cat.ToiletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ToiletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.ToiletsTable,
			Columns: []string{cat.ToiletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CatUpdateOne is the builder for updating a single Cat entity.
type CatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CatMutation
}

// SetName sets the "name" field.
func (cuo *CatUpdateOne) SetName(s string) *CatUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetBirthday sets the "birthday" field.
func (cuo *CatUpdateOne) SetBirthday(t time.Time) *CatUpdateOne {
	cuo.mutation.SetBirthday(t)
	return cuo
}

// SetNillableBirthday sets the "birthday" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableBirthday(t *time.Time) *CatUpdateOne {
	if t != nil {
		cuo.SetBirthday(*t)
	}
	return cuo
}

// ClearBirthday clears the value of the "birthday" field.
func (cuo *CatUpdateOne) ClearBirthday() *CatUpdateOne {
	cuo.mutation.ClearBirthday()
	return cuo
}

// SetSex sets the "sex" field.
func (cuo *CatUpdateOne) SetSex(c cat.Sex) *CatUpdateOne {
	cuo.mutation.SetSex(c)
	return cuo
}

// SetWeight sets the "weight" field.
func (cuo *CatUpdateOne) SetWeight(i int) *CatUpdateOne {
	cuo.mutation.ResetWeight()
	cuo.mutation.SetWeight(i)
	return cuo
}

// SetNillableWeight sets the "weight" field if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableWeight(i *int) *CatUpdateOne {
	if i != nil {
		cuo.SetWeight(*i)
	}
	return cuo
}

// AddWeight adds i to the "weight" field.
func (cuo *CatUpdateOne) AddWeight(i int) *CatUpdateOne {
	cuo.mutation.AddWeight(i)
	return cuo
}

// ClearWeight clears the value of the "weight" field.
func (cuo *CatUpdateOne) ClearWeight() *CatUpdateOne {
	cuo.mutation.ClearWeight()
	return cuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cuo *CatUpdateOne) SetOwnerID(id uuid.UUID) *CatUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (cuo *CatUpdateOne) SetNillableOwnerID(id *uuid.UUID) *CatUpdateOne {
	if id != nil {
		cuo = cuo.SetOwnerID(*id)
	}
	return cuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cuo *CatUpdateOne) SetOwner(u *User) *CatUpdateOne {
	return cuo.SetOwnerID(u.ID)
}

// AddToiletIDs adds the "toilets" edge to the Toilet entity by IDs.
func (cuo *CatUpdateOne) AddToiletIDs(ids ...int) *CatUpdateOne {
	cuo.mutation.AddToiletIDs(ids...)
	return cuo
}

// AddToilets adds the "toilets" edges to the Toilet entity.
func (cuo *CatUpdateOne) AddToilets(t ...*Toilet) *CatUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddToiletIDs(ids...)
}

// Mutation returns the CatMutation object of the builder.
func (cuo *CatUpdateOne) Mutation() *CatMutation {
	return cuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (cuo *CatUpdateOne) ClearOwner() *CatUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// ClearToilets clears all "toilets" edges to the Toilet entity.
func (cuo *CatUpdateOne) ClearToilets() *CatUpdateOne {
	cuo.mutation.ClearToilets()
	return cuo
}

// RemoveToiletIDs removes the "toilets" edge to Toilet entities by IDs.
func (cuo *CatUpdateOne) RemoveToiletIDs(ids ...int) *CatUpdateOne {
	cuo.mutation.RemoveToiletIDs(ids...)
	return cuo
}

// RemoveToilets removes "toilets" edges to Toilet entities.
func (cuo *CatUpdateOne) RemoveToilets(t ...*Toilet) *CatUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveToiletIDs(ids...)
}

// Where appends a list predicates to the CatUpdate builder.
func (cuo *CatUpdateOne) Where(ps ...predicate.Cat) *CatUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CatUpdateOne) Select(field string, fields ...string) *CatUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cat entity.
func (cuo *CatUpdateOne) Save(ctx context.Context) (*Cat, error) {
	return withHooks[*Cat, CatMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CatUpdateOne) SaveX(ctx context.Context) *Cat {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CatUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CatUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CatUpdateOne) check() error {
	if v, ok := cuo.mutation.Name(); ok {
		if err := cat.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Cat.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Sex(); ok {
		if err := cat.SexValidator(v); err != nil {
			return &ValidationError{Name: "sex", err: fmt.Errorf(`ent: validator failed for field "Cat.sex": %w`, err)}
		}
	}
	return nil
}

func (cuo *CatUpdateOne) sqlSave(ctx context.Context) (_node *Cat, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cat.Table, cat.Columns, sqlgraph.NewFieldSpec(cat.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cat.FieldID)
		for _, f := range fields {
			if !cat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(cat.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Birthday(); ok {
		_spec.SetField(cat.FieldBirthday, field.TypeTime, value)
	}
	if cuo.mutation.BirthdayCleared() {
		_spec.ClearField(cat.FieldBirthday, field.TypeTime)
	}
	if value, ok := cuo.mutation.Sex(); ok {
		_spec.SetField(cat.FieldSex, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Weight(); ok {
		_spec.SetField(cat.FieldWeight, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedWeight(); ok {
		_spec.AddField(cat.FieldWeight, field.TypeInt, value)
	}
	if cuo.mutation.WeightCleared() {
		_spec.ClearField(cat.FieldWeight, field.TypeInt)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.OwnerTable,
			Columns: []string{cat.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cat.OwnerTable,
			Columns: []string{cat.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ToiletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.ToiletsTable,
			Columns: []string{cat.ToiletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedToiletsIDs(); len(nodes) > 0 && !cuo.mutation.ToiletsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.ToiletsTable,
			Columns: []string{cat.ToiletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ToiletsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cat.ToiletsTable,
			Columns: []string{cat.ToiletsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(toilet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cat{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
